{"version":3,"file":"index.esm.js","sources":["../src/enums/ReturnTypeEnums.ts","../src/enums/ThresholdTypeEnums.ts","../src/errors.ts","../src/lib/fillDefaultOptions.ts","../src/lib/normalizeString.ts","../src/lib/matchItemProcessor.ts","../src/index.ts","../src/lib/getSimilarity.ts","../src/lib/resultProcessor.ts"],"sourcesContent":["export enum ReturnTypeEnums {\n  ALL_CLOSEST_MATCHES = 'all-closest-matches',\n  ALL_MATCHES = 'all-matches',\n  ALL_SORTED_MATCHES = 'all-sorted-matches',\n  FIRST_CLOSEST_MATCH = 'first-closest-match',\n  FIRST_MATCH = 'first-match',\n}\n","export enum ThresholdTypeEnums {\n  EDIT_DISTANCE = 'edit-distance',\n  SIMILARITY = 'similarity',\n}\n","export const unknownReturnTypeError = new Error('unknown returnType')\nexport const unknownThresholdTypeError = new Error('unknown thresholdType')\n","import { ReturnTypeEnums } from '../enums/ReturnTypeEnums'\nimport { ThresholdTypeEnums } from '../enums/ThresholdTypeEnums'\nimport { unknownThresholdTypeError } from '../errors'\nimport { InputOptions, Options } from '../types'\n\nconst fillDefaultOptions = (options?: InputOptions): Options => {\n  const optionsWithDefaultValues = {\n    caseSensitive: false,\n    deburr: true,\n    matchPath: [],\n    returnType: ReturnTypeEnums.FIRST_CLOSEST_MATCH,\n    thresholdType: ThresholdTypeEnums.SIMILARITY,\n    trimSpaces: true,\n    ...options,\n  }\n\n  switch (optionsWithDefaultValues.thresholdType) {\n    case ThresholdTypeEnums.EDIT_DISTANCE:\n      return {\n        threshold: 20,\n        ...optionsWithDefaultValues,\n      }\n\n    case ThresholdTypeEnums.SIMILARITY:\n      return {\n        threshold: 0.4,\n        ...optionsWithDefaultValues,\n      }\n\n    /* istanbul ignore next */\n    default:\n      throw unknownThresholdTypeError\n  }\n}\nexport default fillDefaultOptions\n","import deburr from 'lodash.deburr'\n\nimport { Options } from '../types'\n\n/**\n * Normalize a string\n * @param {string} str - any string\n * @param {Object} options - options that allows you to modify the behavior\n * @returns {string} - normalized string\n */\nconst normalizeString = (str: string, options: Options): string => {\n  let s = str\n\n  if (options.trimSpaces) {\n    s = s.trim().replace(/\\s+/g, ' ')\n  }\n\n  if (options.deburr) {\n    s = deburr(s)\n  }\n\n  if (!options.caseSensitive) {\n    s = s.toLowerCase()\n  }\n\n  return s\n}\n\nexport default normalizeString\n","import { Options } from '../types'\nimport normalizeString from './normalizeString'\n\nconst getMatchItemStr = (\n  matchItem: object | string,\n  matchPath: Options['matchPath'],\n): string => {\n  const matchItemStr =\n    Array.isArray(matchPath) && matchPath.length\n      ? matchPath.reduce((acc: any, path) => acc?.[path], matchItem)\n      : matchItem\n  if (typeof matchItemStr !== 'string') return ''\n  return matchItemStr\n}\n\n/**\n * Process matchItem according to options\n * @param {Object|string} matchItem - Item for matching with `input`\n * @param {Object} options - options that allows you to modify the behavior\n * @returns {string} - processed matchItem\n */\nconst matchItemProcessor = (\n  matchItem: object | string,\n  options: Options,\n): string => {\n  const { matchPath } = options\n\n  const matchItemStr = getMatchItemStr(matchItem, matchPath)\n\n  return normalizeString(matchItemStr, options)\n}\n\nexport default matchItemProcessor\n","import leven from 'leven'\n\nimport { ReturnTypeEnums } from './enums/ReturnTypeEnums'\nimport { ThresholdTypeEnums } from './enums/ThresholdTypeEnums'\nimport { unknownReturnTypeError, unknownThresholdTypeError } from './errors'\nimport fillDefaultOptions from './lib/fillDefaultOptions'\nimport getSimilarity from './lib/getSimilarity'\nimport matchItemProcessor from './lib/matchItemProcessor'\nimport normalizeString from './lib/normalizeString'\nimport resultProcessor from './lib/resultProcessor'\nimport { InputOptions } from './types'\n\n/**\n * Main function for didyoumean2\n * @param {string} input - string that you are not sure and want to match with `matchList`\n * @param {Object[]|string[]} matchList - List for matching with `input`\n * @param {null|Object|undefined} options - options that allows you to modify the behavior\n * @returns {Array|null|Object|string} - matched result(s), return object if `match` is `{Object[]}`\n */\nconst didYouMean = <T extends object | string>(\n  input: string,\n  matchList: ReadonlyArray<T>,\n  options?: InputOptions,\n): Array<T> | T | null => {\n  /*+++++++++++++++++++\n   + Initiate options +\n   +++++++++++++++++++*/\n\n  const optionsWithDefaults = fillDefaultOptions(options)\n\n  const { returnType, threshold, thresholdType } = optionsWithDefaults\n\n  /*++++++++++++++++++++\n   + Deal with options +\n   ++++++++++++++++++++*/\n\n  const normalizedInput = normalizeString(input, optionsWithDefaults)\n\n  let checkIfMatched // Validate if score is matched\n  let scoreProcessor // Get score\n  switch (thresholdType) {\n    case ThresholdTypeEnums.EDIT_DISTANCE:\n      checkIfMatched = (score: number) => score <= threshold\n      scoreProcessor = (matchItem: T) =>\n        leven(\n          normalizedInput,\n          matchItemProcessor(matchItem, optionsWithDefaults),\n        )\n      break\n\n    case ThresholdTypeEnums.SIMILARITY:\n      checkIfMatched = (score: number) => score >= threshold\n      scoreProcessor = (matchItem: T) =>\n        getSimilarity(\n          normalizedInput,\n          matchItemProcessor(matchItem, optionsWithDefaults),\n        )\n      break\n\n    /* istanbul ignore next */ default:\n      throw unknownThresholdTypeError\n  }\n\n  /*+++++++++++\n   + Matching +\n   +++++++++++*/\n\n  const matchedIndexes = []\n  const matchListLen = matchList.length\n\n  switch (returnType) {\n    case ReturnTypeEnums.ALL_CLOSEST_MATCHES:\n    case ReturnTypeEnums.FIRST_CLOSEST_MATCH: {\n      const scores = []\n\n      let marginValue\n      switch (thresholdType) {\n        case ThresholdTypeEnums.EDIT_DISTANCE:\n          // Process score and save the smallest score\n          marginValue = Infinity\n          for (let i = 0; i < matchListLen; i += 1) {\n            const score = scoreProcessor(matchList[i])\n\n            // eslint-disable-next-line max-depth\n            if (marginValue > score) marginValue = score\n\n            scores.push(score)\n          }\n          break\n\n        case ThresholdTypeEnums.SIMILARITY:\n          // Process score and save the largest score\n          marginValue = 0\n          for (let i = 0; i < matchListLen; i += 1) {\n            const score = scoreProcessor(matchList[i])\n\n            // eslint-disable-next-line max-depth\n            if (marginValue < score) marginValue = score\n\n            scores.push(score)\n          }\n          break\n\n        /* istanbul ignore next */ default:\n          throw unknownThresholdTypeError\n      }\n\n      const scoresLen = scores.length\n      for (let i = 0; i < scoresLen; i += 1) {\n        const score = scores[i]\n\n        if (checkIfMatched(score) && score === marginValue) {\n          matchedIndexes.push(i)\n        }\n      }\n\n      break\n    }\n\n    case ReturnTypeEnums.ALL_MATCHES:\n      for (let i = 0; i < matchListLen; i += 1) {\n        const score = scoreProcessor(matchList[i])\n\n        // save all indexes of matched scores\n        if (checkIfMatched(score)) {\n          matchedIndexes.push(i)\n        }\n      }\n\n      break\n\n    case ReturnTypeEnums.ALL_SORTED_MATCHES: {\n      const unsortedResults = []\n      for (let i = 0; i < matchListLen; i += 1) {\n        const score = scoreProcessor(matchList[i])\n\n        // save all indexes of matched scores\n        if (checkIfMatched(score)) {\n          unsortedResults.push({\n            score,\n            index: i,\n          })\n        }\n      }\n\n      switch (thresholdType) {\n        case ThresholdTypeEnums.EDIT_DISTANCE:\n          unsortedResults.sort((a, b) => a.score - b.score)\n          break\n\n        case ThresholdTypeEnums.SIMILARITY:\n          unsortedResults.sort((a, b) => b.score - a.score)\n          break\n\n        /* istanbul ignore next */ default:\n          throw unknownThresholdTypeError\n      }\n\n      for (const unsortedResult of unsortedResults) {\n        matchedIndexes.push(unsortedResult.index)\n      }\n\n      break\n    }\n\n    case ReturnTypeEnums.FIRST_MATCH:\n      for (let i = 0; i < matchListLen; i += 1) {\n        const score = scoreProcessor(matchList[i])\n\n        // Return once matched, performance is main target in this returnType\n        if (checkIfMatched(score)) {\n          matchedIndexes.push(i)\n          break\n        }\n      }\n\n      break\n\n    /* istanbul ignore next */ default:\n      throw unknownReturnTypeError\n  }\n\n  /*+++++++++++++++++++++++\n   + Process return value +\n   +++++++++++++++++++++++*/\n\n  return resultProcessor(matchList, matchedIndexes, returnType)\n}\n\nexport default didYouMean\nexport { ReturnTypeEnums, ThresholdTypeEnums }\n","import leven from 'leven'\n\n/**\n * Using edit distance between `a` and `b` to calculate similarity\n * @param {string} a - `input`\n * @param {string} b - String from `matchList`\n * @return {number} similarity between `a` and `b`\n */\nconst getSimilarity = (a: string, b: string): number => {\n  if (!a || !b) return 0\n  if (a === b) return 1\n\n  const editDistance = leven(a, b)\n  const longestLength = Math.max(a.length, b.length)\n\n  return (longestLength - editDistance) / longestLength\n}\n\nexport default getSimilarity\n","import { ReturnTypeEnums } from '../enums/ReturnTypeEnums'\n\n/**\n * Generate result\n * @param {Object[]|string[]} matchList - List for matching with `input`\n * @param {number[]} matchedIndexes - indexes of matchList that need to be returned as result\n * @param {string} returnType\n * @returns {Array|null|Object|string} - matched result(s), return object if `match` is `{Object[]}`\n */\nconst resultProcessor = <T>(\n  matchList: ReadonlyArray<T>,\n  matchedIndexes: ReadonlyArray<number>,\n  returnType: ReturnTypeEnums,\n): Array<T> | T | null => {\n  switch (returnType) {\n    case ReturnTypeEnums.ALL_CLOSEST_MATCHES:\n    case ReturnTypeEnums.ALL_MATCHES:\n    case ReturnTypeEnums.ALL_SORTED_MATCHES:\n      return matchedIndexes.map(matchedIndex => matchList[matchedIndex])\n\n    case ReturnTypeEnums.FIRST_CLOSEST_MATCH:\n    case ReturnTypeEnums.FIRST_MATCH:\n      if (!matchedIndexes.length) return null\n      return matchList[matchedIndexes[0]]\n\n    /* istanbul ignore next */ default:\n      return null\n  }\n}\n\nexport default resultProcessor\n"],"names":["ReturnTypeEnums","ThresholdTypeEnums","unknownReturnTypeError","Error","unknownThresholdTypeError","normalizeString","str","options","s","trimSpaces","trim","replace","deburr","caseSensitive","toLowerCase","matchItemProcessor","matchItem","matchItemStr","matchPath","Array","isArray","length","reduce","acc","path","getMatchItemStr","input","matchList","checkIfMatched","scoreProcessor","optionsWithDefaults","optionsWithDefaultValues","returnType","FIRST_CLOSEST_MATCH","thresholdType","SIMILARITY","EDIT_DISTANCE","threshold","fillDefaultOptions","normalizedInput","score","leven","a","b","editDistance","longestLength","Math","max","getSimilarity","matchedIndexes","matchListLen","ALL_CLOSEST_MATCHES","marginValue","scores","Infinity","i","push","scoresLen","ALL_MATCHES","ALL_SORTED_MATCHES","unsortedResults","index","sort","unsortedResult","FIRST_MATCH","map","matchedIndex","resultProcessor"],"mappings":"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"}